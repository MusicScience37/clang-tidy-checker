stages:
  - test
  - deploy
  - release

include:
  - template: Dependency-Scanning.gitlab-ci.yml
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/License-Scanning.gitlab-ci.yml

variables:
  DOCS_PACKAGE_REGISTRY_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/clang-tidy-checker-docs"

.poetry-base:
  image: registry.gitlab.com/musicscience37/my-cpp-env-docker:clang14
  variables:
    PYTHON_VERSION: "3.10"
  before_script:
    - pipx install poetry
    - poetry config virtualenvs.in-project true
    - poetry env use ${PYTHON_VERSION}
    - poetry install
  cache:
    key:
      prefix: poetry-linux-${PYTHON_VERSION}
      files:
        - poetry.lock
    paths:
      - .venv

.test-base:
  extends: .poetry-base
  stage: test
  needs: []
  script:
    - poetry run pytest --cov clang_tidy_checker/ tests
    - poetry run coverage report
    - poetry run coverage xml
    - poetry run coverage html
  artifacts:
    paths:
      - .coverage
      - coverage.xml
      - htmlcov
      - tests/approvals
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    when: always
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'

test python3.9:
  extends: .test-base
  variables:
    PYTHON_VERSION: "3.9"
  allow_failure: true

test python3.10:
  extends: .test-base
  variables:
    PYTHON_VERSION: "3.10"

pre-commit:
  extends: .poetry-base
  stage: test
  needs: []
  script:
    - poetry run pre-commit run --all-files

static-checks:
  extends: .poetry-base
  stage: test
  needs: []
  script:
    - poetry run pylint clang_tidy_checker tests
    - poetry run mypy clang_tidy_checker tests
    - poetry run flake8 clang_tidy_checker tests

publish-package:
  extends: .poetry-base
  stage: deploy
  needs:
    - test python3.9
    - test python3.10
  rules:
    - if: $CI_COMMIT_TAG =~ /^v/
  script:
    - poetry build
    - poetry config repositories.gitlab ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi
    - poetry config http-basic.gitlab gitlab-ci-token ${CI_JOB_TOKEN}
    - poetry config pypi-token.pypi ${PYPI_TOKEN}
    - poetry publish -r gitlab
    - poetry publish

build-document:
  extends: .poetry-base
  stage: test
  needs: []
  rules:
    - if: $CI_COMMIT_TAG =~ /^v/
      variables:
        PROJECT_VERSION: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH
      variables:
        PROJECT_VERSION: $CI_COMMIT_SHORT_SHA
  script:
    - poetry run sphinx-build -b html -W -q -D release=$PROJECT_VERSION
      doc/source doc/build
  artifacts:
    paths:
      - doc/build

pages:
  image: ubuntu
  stage: deploy
  needs: [build-document]
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  script:
    - mv doc/build public
  artifacts:
    paths:
      - public

release:
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  stage: release
  rules:
    - if: $CI_COMMIT_TAG =~ /^v/
  script:
    - echo "This is a release job."
  release:
    tag_name: $CI_COMMIT_TAG
    name: "$CI_COMMIT_TAG"
    description: "./doc/source/change_log/${CI_COMMIT_TAG}.md"
